package gui;

public class BytecodeFlexer extends freditor.Flexer {
    public static final BytecodeFlexer instance = new BytecodeFlexer();

    public static final int END = 0;
    public static final int ERROR = -1;

    public static final int NEWLINE = -2;
    public static final int FIRST_SPACE = -3;
    public static final int NEXT_SPACE = 1;

    public static final int ADDRESS_FIRST = -4;
    public static final int ADDRESS_NEXT = 2;

    public static final int FIRST_DIGIT = -5;
    public static final int NEXT_DIGIT = 3;

    // auto-generated by freditor.FlexerGenerator
    public static final int AT = -6;
    public static final int C = -7;
    public static final int CO = 4;
    public static final int COD = 5;
    public static final int CODE = 6;
    public static final int M = -8;
    public static final int MN = 7;
    public static final int MNE = 8;
    public static final int MNEM = 9;
    public static final int MNEMO = 10;
    public static final int MNEMON = 11;
    public static final int MNEMONI = 12;
    public static final int MNEMONIC = 13;
    public static final int R = -9;
    public static final int RE = 14;
    public static final int RET = 15;
    public static final int MO = 16;
    public static final int MOV = 17;
    public static final int MOVE = 18;
    public static final int T = -10;
    public static final int TR = 19;
    public static final int TRN = 20;
    public static final int TRNL = 21;
    public static final int TRNA = 22;
    public static final int TRNR = 23;
    public static final int P = -11;
    public static final int PI = 24;
    public static final int PIC = 25;
    public static final int PICK = 26;
    public static final int D = -12;
    public static final int DR = 27;
    public static final int DRO = 28;
    public static final int DROP = 29;
    public static final int B = -13;
    public static final int BE = 30;
    public static final int BEE = 31;
    public static final int BEEP = 32;
    public static final int H = -14;
    public static final int HE = 33;
    public static final int HEA = 34;
    public static final int HEAD = 35;
    public static final int L = -15;
    public static final int LC = 36;
    public static final int LCL = 37;
    public static final int LCLR = 38;
    public static final int F = -16;
    public static final int FC = 39;
    public static final int FCL = 40;
    public static final int FCLR = 41;
    public static final int RC = 42;
    public static final int RCL = 43;
    public static final int RCLR = 44;
    public static final int N = -17;
    public static final int NO = 45;
    public static final int NOT = 46;
    public static final int A = -18;
    public static final int AN = 47;
    public static final int AND = 48;
    public static final int O = -19;
    public static final int OR = 49;
    public static final int X = -20;
    public static final int XO = 50;
    public static final int XOR = 51;
    public static final int PU = 52;
    public static final int PUS = 53;
    public static final int PUSH = 54;
    public static final int LO = 55;
    public static final int LOO = 56;
    public static final int LOOP = 57;
    public static final int CA = 58;
    public static final int CAL = 59;
    public static final int CALL = 60;
    public static final int J = -21;
    public static final int JU = 61;
    public static final int JUM = 62;
    public static final int JUMP = 63;
    public static final int J_ZERO = 64;
    public static final int J_ZEROM = 65;
    public static final int J_ZEROMP = 66;
    public static final int J_ONE = 67;
    public static final int J_ONEM = 68;
    public static final int J_ONEMP = 69;

    @Override
    public int pickColorForLexeme(int previousState, char firstCharacter, int endState) {
        switch (endState) {
            default:
                return 0x000000;

            case ERROR:
                return 0xff0000;

            case AT:
            case CODE:
            case MNEMONIC:
            case ADDRESS_FIRST:
            case ADDRESS_NEXT:
                return 0x808080;

            case FIRST_DIGIT:
            case NEXT_DIGIT:
                return 0x6400c8;

            case BEEP:
            case HEAD:
            case LCLR:
            case FCLR:
            case RCLR:
            case NOT:
            case AND:
            case OR:
            case XOR:
            case PUSH:
                return 0x000080;

            case RET:
            case LOOP:
            case CALL:
            case JUMP:
            case J_ZEROMP:
            case J_ONEMP:
                return 0x400000;
        }
    }

    @Override
    protected int nextStateOrEnd(int currentState, char input) {
        switch (currentState) {
            default:
                throw new AssertionError("unhandled lexer state " + currentState + " for input " + input);
            case NEWLINE:
                switch (input) {
                    default:
                        return ERROR;

                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return ADDRESS_FIRST;
                }
            case END:
            case ERROR:
// auto-generated by freditor.FlexerGenerator
            case AT:
            case CODE:
            case MNEMONIC:
            case RET:
            case MOVE:
            case TRNL:
            case TRNA:
            case TRNR:
            case PICK:
            case DROP:
            case BEEP:
            case HEAD:
            case LCLR:
            case FCLR:
            case RCLR:
            case NOT:
            case AND:
            case OR:
            case XOR:
            case PUSH:
            case LOOP:
            case CALL:
            case JUMP:
            case J_ZEROMP:
            case J_ONEMP:
                switch (input) {
                    default:
                        return ERROR;

                    case '\n':
                        return NEWLINE;
                    case ' ':
                        return FIRST_SPACE;

                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return FIRST_DIGIT;

// auto-generated by freditor.FlexerGenerator
                    case '@':
                        return AT;
                    case 'C':
                        return C;
                    case 'M':
                        return M;
                    case 'R':
                        return R;
                    case 'T':
                        return T;
                    case 'P':
                        return P;
                    case 'D':
                        return D;
                    case 'B':
                        return B;
                    case 'H':
                        return H;
                    case 'L':
                        return L;
                    case 'F':
                        return F;
                    case 'N':
                        return N;
                    case 'A':
                        return A;
                    case 'O':
                        return O;
                    case 'X':
                        return X;
                    case 'J':
                        return J;
                }
            case FIRST_SPACE:
            case NEXT_SPACE:
                switch (input) {
                    case ' ':
                        return NEXT_SPACE;
                    default:
                        return END;
                }
            case ADDRESS_FIRST:
            case ADDRESS_NEXT:
                switch (input) {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return ADDRESS_NEXT;
                    default:
                        return END;
                }
            case FIRST_DIGIT:
            case NEXT_DIGIT:
                switch (input) {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return NEXT_DIGIT;
                    default:
                        return END;
                }
                // auto-generated by freditor.FlexerGenerator
            case C:
                return keyword('O', CO, 'A', CA, input);
            case CO:
                return keyword('D', COD, input);
            case COD:
                return keyword('E', CODE, input);
            case M:
                return keyword('N', MN, 'O', MO, input);
            case MN:
                return keyword('E', MNE, input);
            case MNE:
                return keyword('M', MNEM, input);
            case MNEM:
                return keyword('O', MNEMO, input);
            case MNEMO:
                return keyword('N', MNEMON, input);
            case MNEMON:
                return keyword('I', MNEMONI, input);
            case MNEMONI:
                return keyword('C', MNEMONIC, input);
            case R:
                return keyword('E', RE, 'C', RC, input);
            case RE:
                return keyword('T', RET, input);
            case MO:
                return keyword('V', MOV, input);
            case MOV:
                return keyword('E', MOVE, input);
            case T:
                return keyword('R', TR, input);
            case TR:
                return keyword('N', TRN, input);
            case TRN:
                return keyword('L', TRNL, 'A', TRNA, 'R', TRNR, input);
            case P:
                return keyword('I', PI, 'U', PU, input);
            case PI:
                return keyword('C', PIC, input);
            case PIC:
                return keyword('K', PICK, input);
            case D:
                return keyword('R', DR, input);
            case DR:
                return keyword('O', DRO, input);
            case DRO:
                return keyword('P', DROP, input);
            case B:
                return keyword('E', BE, input);
            case BE:
                return keyword('E', BEE, input);
            case BEE:
                return keyword('P', BEEP, input);
            case H:
                return keyword('E', HE, input);
            case HE:
                return keyword('A', HEA, input);
            case HEA:
                return keyword('D', HEAD, input);
            case L:
                return keyword('C', LC, 'O', LO, input);
            case LC:
                return keyword('L', LCL, input);
            case LCL:
                return keyword('R', LCLR, input);
            case F:
                return keyword('C', FC, input);
            case FC:
                return keyword('L', FCL, input);
            case FCL:
                return keyword('R', FCLR, input);
            case RC:
                return keyword('L', RCL, input);
            case RCL:
                return keyword('R', RCLR, input);
            case N:
                return keyword('O', NO, input);
            case NO:
                return keyword('T', NOT, input);
            case A:
                return keyword('N', AN, input);
            case AN:
                return keyword('D', AND, input);
            case O:
                return keyword('R', OR, input);
            case X:
                return keyword('O', XO, input);
            case XO:
                return keyword('R', XOR, input);
            case PU:
                return keyword('S', PUS, input);
            case PUS:
                return keyword('H', PUSH, input);
            case LO:
                return keyword('O', LOO, input);
            case LOO:
                return keyword('P', LOOP, input);
            case CA:
                return keyword('L', CAL, input);
            case CAL:
                return keyword('L', CALL, input);
            case J:
                return keyword('U', JU, '0', J_ZERO, '1', J_ONE, input);
            case JU:
                return keyword('M', JUM, input);
            case JUM:
                return keyword('P', JUMP, input);
            case J_ZERO:
                return keyword('M', J_ZEROM, input);
            case J_ZEROM:
                return keyword('P', J_ZEROMP, input);
            case J_ONE:
                return keyword('M', J_ONEM, input);
            case J_ONEM:
                return keyword('P', J_ONEMP, input);

        }
    }

    @Override
    protected int identifier(char input) {
        return END;
    }
}
