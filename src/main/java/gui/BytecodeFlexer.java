package gui;

public class BytecodeFlexer extends freditor.Flexer {
    public static final BytecodeFlexer instance = new BytecodeFlexer();

    public static final int END = 0;
    public static final int ERROR = -1;

    public static final int NEWLINE = -2;
    public static final int FIRST_SPACE = -3;
    public static final int NEXT_SPACE = 1;

    public static final int FIRST_DIGIT = -4;
    public static final int NEXT_DIGIT = 2;

    // auto-generated by freditor.FlexerGenerator
    public static final int AT = -5;
    public static final int C = -6;
    public static final int CO = 3;
    public static final int COD = 4;
    public static final int CODE = 5;
    public static final int M = -7;
    public static final int MN = 6;
    public static final int MNE = 7;
    public static final int MNEM = 8;
    public static final int MNEMO = 9;
    public static final int MNEMON = 10;
    public static final int MNEMONI = 11;
    public static final int MNEMONIC = 12;
    public static final int R = -8;
    public static final int RE = 13;
    public static final int RET = 14;
    public static final int MO = 15;
    public static final int MOV = 16;
    public static final int MOVE = 17;
    public static final int T = -9;
    public static final int TR = 18;
    public static final int TRN = 19;
    public static final int TRNL = 20;
    public static final int TRNA = 21;
    public static final int TRNR = 22;
    public static final int P = -10;
    public static final int PI = 23;
    public static final int PIC = 24;
    public static final int PICK = 25;
    public static final int D = -11;
    public static final int DR = 26;
    public static final int DRO = 27;
    public static final int DROP = 28;
    public static final int B = -12;
    public static final int BE = 29;
    public static final int BEE = 30;
    public static final int BEEP = 31;
    public static final int H = -13;
    public static final int HE = 32;
    public static final int HEA = 33;
    public static final int HEAD = 34;
    public static final int L = -14;
    public static final int LC = 35;
    public static final int LCL = 36;
    public static final int LCLR = 37;
    public static final int F = -15;
    public static final int FC = 38;
    public static final int FCL = 39;
    public static final int FCLR = 40;
    public static final int RC = 41;
    public static final int RCL = 42;
    public static final int RCLR = 43;
    public static final int N = -16;
    public static final int NO = 44;
    public static final int NOT = 45;
    public static final int A = -17;
    public static final int AN = 46;
    public static final int AND = 47;
    public static final int O = -18;
    public static final int OR = 48;
    public static final int X = -19;
    public static final int XO = 49;
    public static final int XOR = 50;
    public static final int PU = 51;
    public static final int PUS = 52;
    public static final int PUSH = 53;
    public static final int LO = 54;
    public static final int LOO = 55;
    public static final int LOOP = 56;
    public static final int CA = 57;
    public static final int CAL = 58;
    public static final int CALL = 59;
    public static final int J = -20;
    public static final int JU = 60;
    public static final int JUM = 61;
    public static final int JUMP = 62;
    public static final int J0 = 63;
    public static final int J0M = 64;
    public static final int J0MP = 65;
    public static final int J1 = 66;
    public static final int J1M = 67;
    public static final int J1MP = 68;

    @Override
    public int pickColorForLexeme(int previousState, char firstCharacter, int endState) {
        switch (endState) {
            default:
                return 0x000000;

            case ERROR:
                return 0xff0000;

            case FIRST_DIGIT:
            case NEXT_DIGIT:
                if (previousState != NEWLINE) return 0x6400c8;

            case AT:
            case CODE:
            case MNEMONIC:
                return 0x808080;

            case BEEP:
            case HEAD:
            case LCLR:
            case FCLR:
            case RCLR:
            case NOT:
            case AND:
            case OR:
            case XOR:
            case PUSH:
                return 0x000080;

            case RET:
            case LOOP:
            case CALL:
            case JUMP:
            case J0MP:
            case J1MP:
                return 0x400000;
        }
    }

    @Override
    protected int nextStateOrEnd(int currentState, char input) {
        switch (currentState) {
            default:
                throw new AssertionError("unhandled lexer state " + currentState + " for input " + input);

            case END:
            case ERROR:
            case NEWLINE:
                // auto-generated by freditor.FlexerGenerator
            case AT:
            case CODE:
            case MNEMONIC:
            case RET:
            case MOVE:
            case TRNL:
            case TRNA:
            case TRNR:
            case PICK:
            case DROP:
            case BEEP:
            case HEAD:
            case LCLR:
            case FCLR:
            case RCLR:
            case NOT:
            case AND:
            case OR:
            case XOR:
            case PUSH:
            case LOOP:
            case CALL:
            case JUMP:
            case J0MP:
            case J1MP:
                switch (input) {
                    default:
                        return ERROR;

                    case '\n':
                        return NEWLINE;

                    case ' ':
                        return FIRST_SPACE;

                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return FIRST_DIGIT;

                    // auto-generated by freditor.FlexerGenerator
                    case '@':
                        return AT;
                    case 'C':
                        return C;
                    case 'M':
                        return M;
                    case 'R':
                        return R;
                    case 'T':
                        return T;
                    case 'P':
                        return P;
                    case 'D':
                        return D;
                    case 'B':
                        return B;
                    case 'H':
                        return H;
                    case 'L':
                        return L;
                    case 'F':
                        return F;
                    case 'N':
                        return N;
                    case 'A':
                        return A;
                    case 'O':
                        return O;
                    case 'X':
                        return X;
                    case 'J':
                        return J;
                }
            case FIRST_SPACE:
            case NEXT_SPACE:
                switch (input) {
                    case ' ':
                        return NEXT_SPACE;
                    default:
                        return END;
                }
            case FIRST_DIGIT:
            case NEXT_DIGIT:
                switch (input) {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                        return NEXT_DIGIT;
                    default:
                        return END;
                }
                // auto-generated by freditor.FlexerGenerator
            case C:
                return input == 'O' ? CO : input == 'A' ? CA : END;
            case CO:
                return input == 'D' ? COD : END;
            case COD:
                return input == 'E' ? CODE : END;
            case M:
                return input == 'N' ? MN : input == 'O' ? MO : END;
            case MN:
                return input == 'E' ? MNE : END;
            case MNE:
                return input == 'M' ? MNEM : END;
            case MNEM:
                return input == 'O' ? MNEMO : END;
            case MNEMO:
                return input == 'N' ? MNEMON : END;
            case MNEMON:
                return input == 'I' ? MNEMONI : END;
            case MNEMONI:
                return input == 'C' ? MNEMONIC : END;
            case R:
                return input == 'E' ? RE : input == 'C' ? RC : END;
            case RE:
                return input == 'T' ? RET : END;
            case MO:
                return input == 'V' ? MOV : END;
            case MOV:
                return input == 'E' ? MOVE : END;
            case T:
                return input == 'R' ? TR : END;
            case TR:
                return input == 'N' ? TRN : END;
            case TRN:
                return input == 'L' ? TRNL : input == 'A' ? TRNA : input == 'R' ? TRNR : END;
            case P:
                return input == 'I' ? PI : input == 'U' ? PU : END;
            case PI:
                return input == 'C' ? PIC : END;
            case PIC:
                return input == 'K' ? PICK : END;
            case D:
                return input == 'R' ? DR : END;
            case DR:
                return input == 'O' ? DRO : END;
            case DRO:
                return input == 'P' ? DROP : END;
            case B:
                return input == 'E' ? BE : END;
            case BE:
                return input == 'E' ? BEE : END;
            case BEE:
                return input == 'P' ? BEEP : END;
            case H:
                return input == 'E' ? HE : END;
            case HE:
                return input == 'A' ? HEA : END;
            case HEA:
                return input == 'D' ? HEAD : END;
            case L:
                return input == 'C' ? LC : input == 'O' ? LO : END;
            case LC:
                return input == 'L' ? LCL : END;
            case LCL:
                return input == 'R' ? LCLR : END;
            case F:
                return input == 'C' ? FC : END;
            case FC:
                return input == 'L' ? FCL : END;
            case FCL:
                return input == 'R' ? FCLR : END;
            case RC:
                return input == 'L' ? RCL : END;
            case RCL:
                return input == 'R' ? RCLR : END;
            case N:
                return input == 'O' ? NO : END;
            case NO:
                return input == 'T' ? NOT : END;
            case A:
                return input == 'N' ? AN : END;
            case AN:
                return input == 'D' ? AND : END;
            case O:
                return input == 'R' ? OR : END;
            case X:
                return input == 'O' ? XO : END;
            case XO:
                return input == 'R' ? XOR : END;
            case PU:
                return input == 'S' ? PUS : END;
            case PUS:
                return input == 'H' ? PUSH : END;
            case LO:
                return input == 'O' ? LOO : END;
            case LOO:
                return input == 'P' ? LOOP : END;
            case CA:
                return input == 'L' ? CAL : END;
            case CAL:
                return input == 'L' ? CALL : END;
            case J:
                return input == 'U' ? JU : input == '0' ? J0 : input == '1' ? J1 : END;
            case JU:
                return input == 'M' ? JUM : END;
            case JUM:
                return input == 'P' ? JUMP : END;
            case J0:
                return input == 'M' ? J0M : END;
            case J0M:
                return input == 'P' ? J0MP : END;
            case J1:
                return input == 'M' ? J1M : END;
            case J1M:
                return input == 'P' ? J1MP : END;
        }
    }
}