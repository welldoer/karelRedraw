package freditor;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

public class FlexerGenerator {
    public FlexerGenerator(int lastNegative, int lastPositive) {
        negative = lastNegative;
        positive = lastPositive;
    }

    private int negative;
    private int positive;

    private LinkedHashMap<String, String> transitions;

    private void autoGenerated() {
        System.out.println("\n// auto-generated by " + getClass().getName());
    }

    public void generateTokens(String... tokens) {
        transitions = new LinkedHashMap<>();
        transitions.put("", "");
        computeTransitions(tokens);
        String initialInputs = transitions.remove("");

        autoGenerated();
        generateStates();

        autoGenerated();
        generateInitialCases(initialInputs);

        autoGenerated();
        generateTransitionCases(true, "keyword", "identifier(input)");
        generateTransitionCases(false, "operator", "END");
    }

    private void computeTransitions(String[] tokens) {
        for (String token : tokens) {
            computeTransitions(token);
        }
    }

    private void computeTransitions(String token) {
        String nextPrefix = "";
        final int len = token.length();
        for (int i = 0; i < len; ++i) {
            String prefix = nextPrefix;
            nextPrefix = token.substring(0, i + 1);
            String inputs = transitions.get(prefix);
            char input = token.charAt(i);
            if (inputs.indexOf(input) < 0) {
                transitions.put(prefix, inputs + input);
                transitions.put(nextPrefix, "");
            }
        }
    }

    private void generateStates() {
        for (String prefix : transitions.keySet()) {
            String name = stateName(prefix);
            int value = (prefix.length() == 1) ? --negative : ++positive;
            System.out.println("public static final int " + name + " = " + value + ";");
        }
    }

    private void generateInitialCases(String inputs) {
        final int len = inputs.length();
        for (int i = 0; i < len; ++i) {
            char input = inputs.charAt(i);
            System.out.println("case '" + input + "': return " + stateName(input) + ";");
        }
    }

    private void generateTransitionCases(boolean filterOnKeywords, String methodName, String tokenReturnValue) {
        ArrayList<String> leaves = new ArrayList<>();
        for (Map.Entry<String, String> entry : transitions.entrySet()) {
            String prefix = entry.getKey();
            String inputs = entry.getValue();
            if (isKeywordPrefix(prefix) == filterOnKeywords) {
                if (inputs.isEmpty()) {
                    leaves.add(prefix);
                } else {
                    generateTransitionCase(methodName, prefix, inputs);
                }
            }
        }
        for (String leaf : leaves) {
            System.out.println("case " + stateName(leaf) + ":");
        }
        System.out.println("return " + tokenReturnValue + ";");
    }

    private boolean isKeywordPrefix(String prefix) {
        return stateName(prefix.charAt(0)).length() == 1;
    }

    private void generateTransitionCase(String methodName, String prefix, String inputs) {
        System.out.print("case " + stateName(prefix) + ": return " + methodName + "(");
        final int len = inputs.length();
        for (int i = 0; i < len; ++i) {
            char input = inputs.charAt(i);
            System.out.print("'" + input + "', " + stateName(prefix + input) + ", ");
        }
        System.out.println("input);");
    }

    private static String stateName(String prefix) {
        StringBuilder stateName = new StringBuilder(stateName(prefix.charAt(0)));
        final int len = prefix.length();
        for (int i = 1; i < len; ++i) {
            String name = stateName(prefix.charAt(i));
            if (name.length() > 1) {
                stateName.append('_');
            }
            stateName.append(name);
        }
        return stateName.toString();
    }

    private static String stateName(char input) {
        return asciiNames[input - 32];
    }

    private static final String[] asciiNames = {
            "SPACE", "BANG", "QUOTE", "HASH", "DOLLAR", "PERCENT", "AMPERSAND", "APOSTROPHE",
            "OPENING_PAREN", "CLOSING_PAREN", "ASTERISK", "PLUS", "COMMA", "HYPHEN", "DOT", "SLASH",
            "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE",
            "COLON", "SEMICOLON", "LESS", "EQUAL", "MORE", "QUESTION", "AT",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
            "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "OPENING_BRACKET", "BACKSLASH", "CLOSING_BRACKET", "CARET", "UNDERSCORE", "GRAVE",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
            "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "OPENING_BRACE", "BAR", "CLOSING_BRACE", "TILDE"
    };
}